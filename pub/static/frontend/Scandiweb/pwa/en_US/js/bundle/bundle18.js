require.config({"config": {
        "jsbuild":{"Magento_Braintree/js/view/payment/method-renderer/cc-form.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\n/*browser:true*/\n/*global define*/\ndefine(\n    [\n        'underscore',\n        'jquery',\n        'Magento_Payment/js/view/payment/cc-form',\n        'Magento_Braintree/js/view/payment/adapter',\n        'braintreeHostedFields',\n        'Magento_Checkout/js/model/quote',\n        'Magento_Braintree/js/validator',\n        'Magento_Ui/js/model/messageList',\n        'Magento_Braintree/js/view/payment/validator-handler',\n        'Magento_Vault/js/view/payment/vault-enabler',\n        'Magento_Braintree/js/view/payment/kount',\n        'mage/translate',\n        'prototype',\n        'domReady!'\n    ],\n    function (\n        _,\n        $,\n        Component,\n        braintreeAdapter,\n        hostedFields,\n        quote,\n        validator,\n        globalMessageList,\n        validatorManager,\n        VaultEnabler,\n        kount,\n        $t\n    ) {\n        'use strict';\n\n        return Component.extend({\n            defaults: {\n                template: 'Magento_Braintree/payment/form',\n                active: false,\n                code: 'braintree',\n                lastBillingAddress: null,\n                hostedFieldsInstance: null,\n                selectorsMapper: {\n                    'expirationMonth': 'expirationMonth',\n                    'expirationYear': 'expirationYear',\n                    'number': 'cc_number',\n                    'cvv': 'cc_cid'\n                },\n                paymentPayload: {\n                    nonce: null\n                },\n                additionalData: {}\n            },\n\n            /**\n             * @returns {exports.initialize}\n             */\n            initialize: function () {\n                var self = this;\n\n                self._super();\n                self.vaultEnabler = new VaultEnabler();\n                self.vaultEnabler.setPaymentCode(self.getVaultCode());\n\n                kount.getDeviceData()\n                    .then(function (deviceData) {\n                        self.additionalData['device_data'] = deviceData;\n                    });\n\n                return self;\n            },\n\n            /**\n             * Init hosted fields.\n             *\n             * Is called after knockout finishes input fields bindings.\n             */\n            initHostedFields: function () {\n                var self = this;\n\n                braintreeAdapter.getApiClient()\n                    .then(function (clientInstance) {\n\n                        return hostedFields.create({\n                            client: clientInstance,\n                            fields: self.getFieldsConfiguration()\n                        });\n                    })\n                    .then(function (hostedFieldsInstance) {\n                        self.hostedFieldsInstance = hostedFieldsInstance;\n                        self.isPlaceOrderActionAllowed(false);\n                        self.initFormValidationEvents(hostedFieldsInstance);\n\n                        return self.hostedFieldsInstance;\n                    })\n                    .catch(function () {\n                        self.showError($t('Payment ' + self.getTitle() + ' can\\'t be initialized'));\n                    });\n            },\n\n            /**\n             * Set list of observable attributes\n             *\n             * @returns {exports.initObservable}\n             */\n            initObservable: function () {\n                validator.setConfig(window.checkoutConfig.payment[this.getCode()]);\n                this._super()\n                    .observe(['active']);\n\n                return this;\n            },\n\n            /**\n             * Get payment name\n             *\n             * @returns {String}\n             */\n            getCode: function () {\n                return this.code;\n            },\n\n            /**\n             * Check if payment is active\n             *\n             * @returns {Boolean}\n             */\n            isActive: function () {\n                var active = this.getCode() === this.isChecked();\n\n                this.active(active);\n\n                return active;\n            },\n\n            /**\n             * Get data\n             *\n             * @returns {Object}\n             */\n            getData: function () {\n                var data = {\n                    'method': this.getCode(),\n                    'additional_data': {\n                        'payment_method_nonce': this.paymentPayload.nonce\n                    }\n                };\n\n                data['additional_data'] = _.extend(data['additional_data'], this.additionalData);\n                this.vaultEnabler.visitAdditionalData(data);\n\n                return data;\n            },\n\n            /**\n             * Get list of available CC types\n             *\n             * @returns {Object}\n             */\n            getCcAvailableTypes: function () {\n                var availableTypes = validator.getAvailableCardTypes(),\n                    billingAddress = quote.billingAddress(),\n                    billingCountryId;\n\n                this.lastBillingAddress = quote.shippingAddress();\n\n                if (!billingAddress) {\n                    billingAddress = this.lastBillingAddress;\n                }\n\n                billingCountryId = billingAddress.countryId;\n\n                if (billingCountryId && validator.getCountrySpecificCardTypes(billingCountryId)) {\n                    return validator.collectTypes(\n                        availableTypes,\n                        validator.getCountrySpecificCardTypes(billingCountryId)\n                    );\n                }\n\n                return availableTypes;\n            },\n\n            /**\n             * @returns {Boolean}\n             */\n            isVaultEnabled: function () {\n                return this.vaultEnabler.isVaultEnabled();\n            },\n\n            /**\n             * Returns vault code.\n             *\n             * @returns {String}\n             */\n            getVaultCode: function () {\n                return window.checkoutConfig.payment[this.getCode()].ccVaultCode;\n            },\n\n            /**\n             * Action to place order\n             * @param {String} key\n             */\n            placeOrder: function (key) {\n                var self = this;\n\n                if (key) {\n                    return self._super();\n                }\n                // place order on success validation\n                validatorManager.validate(self, function () {\n                    return self.placeOrder('parent');\n                }, function (err) {\n\n                    if (err) {\n                        self.showError(err);\n                    }\n                });\n\n                return false;\n            },\n\n            /**\n             * Returns state of place order button\n             *\n             * @returns {Boolean}\n             */\n            isButtonActive: function () {\n                return this.isActive() && this.isPlaceOrderActionAllowed();\n            },\n\n            /**\n             * Trigger order placing\n             */\n            placeOrderClick: function () {\n                var self = this;\n\n                if (this.isFormValid(this.hostedFieldsInstance)) {\n                    self.hostedFieldsInstance.tokenize(function (err, payload) {\n                        if (err) {\n                            self.showError($t('Some payment input fields are invalid.'));\n\n                            return;\n                        }\n\n                        if (self.validateCardType()) {\n                            self.setPaymentPayload(payload);\n                            self.placeOrder();\n                        }\n                    });\n                }\n            },\n\n            /**\n             * Validates credit card form.\n             *\n             * @param {Object} hostedFieldsInstance\n             * @returns {Boolean}\n             * @private\n             */\n            isFormValid: function (hostedFieldsInstance) {\n                var self = this,\n                    state = hostedFieldsInstance.getState();\n\n                return Object.keys(state.fields).every(function (fieldKey) {\n                    if (fieldKey in self.selectorsMapper && state.fields[fieldKey].isValid === false) {\n                        self.addInvalidClass(self.selectorsMapper[fieldKey]);\n                    }\n\n                    return state.fields[fieldKey].isValid;\n                });\n            },\n\n            /**\n             * Init form validation events.\n             *\n             * @param {Object} hostedFieldsInstance\n             * @private\n             */\n            initFormValidationEvents: function (hostedFieldsInstance) {\n                var self = this;\n\n                hostedFieldsInstance.on('empty', function (event) {\n                    if (event.emittedBy === 'number') {\n                        self.selectedCardType(null);\n                    }\n\n                });\n\n                hostedFieldsInstance.on('blur', function (event) {\n                    if (event.emittedBy === 'number') {\n                        self.validateCardType();\n                    }\n                });\n\n                hostedFieldsInstance.on('validityChange', function (event) {\n                    var field = event.fields[event.emittedBy],\n                        fieldKey = event.emittedBy;\n\n                    if (fieldKey === 'number') {\n                        self.isValidCardNumber = field.isValid;\n                    }\n\n                    if (fieldKey in self.selectorsMapper && field.isValid === false) {\n                        self.addInvalidClass(self.selectorsMapper[fieldKey]);\n                    }\n                });\n\n                hostedFieldsInstance.on('cardTypeChange', function (event) {\n                    if (event.cards.length === 1) {\n                        self.selectedCardType(\n                            validator.getMageCardType(event.cards[0].type, self.getCcAvailableTypes())\n                        );\n                    }\n                });\n            },\n\n            /**\n             * Get full selector name\n             *\n             * @param {String} field\n             * @returns {String}\n             * @private\n             */\n            getSelector: function (field) {\n                return '#' + this.getCode() + '_' + field;\n            },\n\n            /**\n             * Add invalid class to field.\n             *\n             * @param {String} field\n             * @returns void\n             * @private\n             */\n            addInvalidClass: function (field) {\n                $(this.getSelector(field)).addClass('braintree-hosted-fields-invalid');\n            },\n\n            /**\n             * Remove invalid class from field.\n             *\n             * @param {String} field\n             * @returns void\n             * @private\n             */\n            removeInvalidClass: function (field) {\n                $(this.getSelector(field)).removeClass('braintree-hosted-fields-invalid');\n            },\n\n            /**\n             * Get Braintree Hosted Fields\n             *\n             * @returns {Object}\n             * @private\n             */\n            getFieldsConfiguration: function () {\n                var self = this,\n                    fields = {\n                        number: {\n                            selector: self.getSelector('cc_number')\n                        },\n                        expirationMonth: {\n                            selector: self.getSelector('expirationMonth'),\n                            placeholder: $t('MM')\n                        },\n                        expirationYear: {\n                            selector: self.getSelector('expirationYear'),\n                            placeholder: $t('YY')\n                        }\n                    };\n\n                if (self.hasVerification()) {\n                    fields.cvv = {\n                        selector: self.getSelector('cc_cid')\n                    };\n                }\n\n                return fields;\n            },\n\n            /**\n             * Validate current credit card type.\n             *\n             * @returns {Boolean}\n             * @private\n             */\n            validateCardType: function () {\n                var cardFieldName = 'cc_number';\n\n                this.removeInvalidClass(cardFieldName);\n\n                if (this.selectedCardType() === null || !this.isValidCardNumber) {\n                    this.addInvalidClass(cardFieldName);\n\n                    return false;\n                }\n\n                return true;\n            },\n\n            /**\n             * Sets payment payload\n             *\n             * @param {Object} paymentPayload\n             * @private\n             */\n            setPaymentPayload: function (paymentPayload) {\n                this.paymentPayload = paymentPayload;\n            },\n\n            /**\n             * Show error message\n             *\n             * @param {String} errorMessage\n             * @private\n             */\n            showError: function (errorMessage) {\n                globalMessageList.addErrorMessage({\n                    message: errorMessage\n                });\n            }\n        });\n    }\n);\n"}
}});
