require.config({"config": {
        "jsbuild":{"mage/requirejs/mixins.js":"/**\n * Copyright \u00a9 Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndefine('mixins', [\n    'module'\n], function (module) {\n    'use strict';\n\n    var rjsMixins;\n\n    /**\n     * Checks if specified string contains\n     * a plugin spacer '!' substring.\n     *\n     * @param {String} name - Name, path or alias of a module.\n     * @returns {Boolean}\n     */\n    function hasPlugin(name) {\n        return !!~name.indexOf('!');\n    }\n\n    /**\n     * Adds 'mixins!' prefix to the specified string.\n     *\n     * @param {String} name - Name, path or alias of a module.\n     * @returns {String} Modified name.\n     */\n    function addPlugin(name) {\n        return 'mixins!' + name;\n    }\n\n    /**\n     * Removes base url from the provided string.\n     *\n     * @param {String} url - Url to be processed.\n     * @param {Object} config - Contexts' configuration object.\n     * @returns {String} String without base url.\n     */\n    function removeBaseUrl(url, config) {\n        var baseUrl = config.baseUrl || '',\n            index = url.indexOf(baseUrl);\n\n        if (~index) {\n            url = url.substring(baseUrl.length - index);\n        }\n\n        return url;\n    }\n\n    /**\n     * Extracts url (without baseUrl prefix)\n     * from a modules' name.\n     *\n     * @param {String} name - Name, path or alias of a module.\n     * @param {Object} config - Contexts' configuartion.\n     * @returns {String}\n     */\n    function getPath(name, config) {\n        var url = require.toUrl(name);\n\n        return removeBaseUrl(url, config);\n    }\n\n    /**\n     * Checks if specified string represents a relative path (../).\n     *\n     * @param {String} name - Name, path or alias of a module.\n     * @returns {Boolean}\n     */\n    function isRelative(name) {\n        return !!~name.indexOf('./');\n    }\n\n    /**\n     * Iterativly calls mixins passing to them\n     * current value of a 'target' parameter.\n     *\n     * @param {*} target - Value to be modified.\n     * @param {...Function} mixins\n     * @returns {*} Modified 'target' value.\n     */\n    function applyMixins(target) {\n        var mixins = Array.prototype.slice.call(arguments, 1);\n\n        mixins.forEach(function (mixin) {\n            target = mixin(target);\n        });\n\n        return target;\n    }\n\n    rjsMixins = {\n\n        /**\n         * Loads specified module along with its' mixins.\n         *\n         * @param {String} name - Module to be loaded.\n         */\n        load: function (name, req, onLoad, config) {\n            var path     = getPath(name, config),\n                mixins   = this.getMixins(path),\n                deps     = [name].concat(mixins);\n\n            req(deps, function () {\n                onLoad(applyMixins.apply(null, arguments));\n            });\n        },\n\n        /**\n         * Retrieves list of mixins associated with a specified module.\n         *\n         * @param {String} path - Path to the module (without base url).\n         * @returns {Array} An array of paths to mixins.\n         */\n        getMixins: function (path) {\n            var config = module.config() || {},\n            mixins;\n\n            // fix for when urlArgs is set\n            if (path.indexOf('?') !== -1) {\n                path = path.substring(0, path.indexOf('?'));\n            }\n            mixins = config[path] || {};\n\n            return Object.keys(mixins).filter(function (mixin) {\n                return mixins[mixin] !== false;\n            });\n        },\n\n        /**\n         * Checks if specified module has associated with it mixins.\n         *\n         * @param {String} path - Path to the module (without base url).\n         * @returns {Boolean}\n         */\n        hasMixins: function (path) {\n            return this.getMixins(path).length;\n        },\n\n        /**\n         * Modifies provided names perpending to them\n         * the 'mixins!' plugin prefix if it's necessary.\n         *\n         * @param {(Array|String)} names - Module names, paths or aliases.\n         * @param {Object} context - Current requirejs context.\n         * @returns {Array|String}\n         */\n        processNames: function (names, context) {\n            var config = context.config;\n\n            /**\n             * Prepends 'mixin' plugin to a single name.\n             *\n             * @param {String} name\n             * @returns {String}\n             */\n            function processName(name) {\n                var path = getPath(name, config);\n\n                if (!hasPlugin(name) && (isRelative(name) || rjsMixins.hasMixins(path))) {\n                    return addPlugin(name);\n                }\n\n                return name;\n            }\n\n            return typeof names !== 'string' ?\n                names.map(processName) :\n                processName(names);\n        }\n    };\n\n    return rjsMixins;\n});\n\nrequire([\n    'mixins'\n], function (mixins) {\n    'use strict';\n\n    var originalRequire  = window.require,\n        originalDefine   = window.define,\n        contexts         = originalRequire.s.contexts,\n        defContextName   = '_',\n        hasOwn           = Object.prototype.hasOwnProperty,\n        getLastInQueue;\n\n    getLastInQueue =\n        '(function () {' +\n            'var queue  = globalDefQueue,' +\n                'item   = queue[queue.length - 1];' +\n            '' +\n            'return item;' +\n        '})();';\n\n    /**\n     * Returns property of an object if\n     * it's not defined in it's prototype.\n     *\n     * @param {Object} obj - Object whose property should be retrieved.\n     * @param {String} prop - Name of the property.\n     * @returns {*} Value of the property or false.\n     */\n    function getOwn(obj, prop) {\n        return hasOwn.call(obj, prop) && obj[prop];\n    }\n\n    /**\n     * Overrides global 'require' method adding to it dependencies modfication.\n     */\n    window.require = function (deps, callback, errback, optional) {\n        var contextName = defContextName,\n            context,\n            config;\n\n        if (!Array.isArray(deps) && typeof deps !== 'string') {\n            config = deps;\n\n            if (Array.isArray(callback)) {\n                deps = callback;\n                callback = errback;\n                errback = optional;\n            } else {\n                deps = [];\n            }\n        }\n\n        if (config && config.context) {\n            contextName = config.context;\n        }\n\n        context = getOwn(contexts, contextName);\n\n        if (!context) {\n            context = contexts[contextName] = require.s.newContext(contextName);\n        }\n\n        if (config) {\n            context.configure(config);\n        }\n\n        deps = mixins.processNames(deps, context);\n\n        return context.require(deps, callback, errback);\n    };\n\n    /**\n     * Overrides global 'define' method adding to it dependencies modfication.\n     */\n    window.define = function (name, deps, callback) { // eslint-disable-line no-unused-vars\n        var context     = getOwn(contexts, defContextName),\n            result      = originalDefine.apply(this, arguments),\n            queueItem   = require.exec(getLastInQueue),\n            lastDeps    = queueItem && queueItem[1];\n\n        if (Array.isArray(lastDeps)) {\n            queueItem[1] = mixins.processNames(lastDeps, context);\n        }\n\n        return result;\n    };\n\n    /**\n     * Copy properties of original 'require' method.\n     */\n    Object.keys(originalRequire).forEach(function (key) {\n        require[key] = originalRequire[key];\n    });\n\n    /**\n     * Copy properties of original 'define' method.\n     */\n    Object.keys(originalDefine).forEach(function (key) {\n        define[key] = originalDefine[key];\n    });\n\n    window.requirejs = window.require;\n});\n"}
}});
